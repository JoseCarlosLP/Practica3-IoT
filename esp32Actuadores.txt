#include <WiFi.h>
#include <PubSubClient.h>

const char * WIFI_SSID = "XRN";
const char * WIFI_PASS = "joseclp08";
const char * MQTT_BROKER = "broker.hivemq.com";
const int MQTT_BROKER_PORT = 1883;
const char * MQTT_CLIENT_ID = "esp32ibq01081111";
const char * SUBSCRIBE_TOPIC = "ucbcbaibq1/leds";

const int YELLOW=13;
const int RED=12;
const int ORANGE=14;

WiFiClient wiFiClient;
PubSubClient mqttClient(wiFiClient);

void turnOn(bool redStatus,bool yellowStatus,bool orangeStatus){
  digitalWrite(RED,redStatus);
  digitalWrite(YELLOW,yellowStatus);    
  digitalWrite(ORANGE,orangeStatus);  
}

void callback(const char * topic, byte * payload, unsigned int lenght) {
  String message;
  for (int i = 0; i < lenght; i++) {
    message += String((char) payload[i]);
  }
  if (String(topic) == SUBSCRIBE_TOPIC) {
    Serial.println(message);
    if (message == "TURN_OFF") {
      turnOn(0,0,0);
    } else {
      turnOn(int(message[0])-48,int(message[1])-48,int(message[2])-48);
    }
  }
}

boolean mqttClientConnect() {
  Serial.print("Connecting to " + String(MQTT_BROKER));
  if (mqttClient.connect(MQTT_CLIENT_ID)) {
    Serial.println(" DONE!"); 
    mqttClient.subscribe(SUBSCRIBE_TOPIC);
    Serial.println("Subscribed to " + String(SUBSCRIBE_TOPIC));
  } else {
    Serial.println("Can't connect to " + String(MQTT_BROKER));
  }
  return mqttClient.connected();
}

void setup() {
  pinMode(RED,OUTPUT);
  pinMode(YELLOW,OUTPUT);
  pinMode(ORANGE,OUTPUT);

  Serial.begin(115200);
  Serial.print("Connecting to " + String(WIFI_SSID));
  WiFi.begin(WIFI_SSID, WIFI_PASS);
  while (WiFi.status() != WL_CONNECTED) {
    delay(200);
    Serial.print(".");
  }
  Serial.println(" DONE!");

  mqttClient.setServer(MQTT_BROKER, MQTT_BROKER_PORT);
  mqttClient.setCallback(callback);
}

unsigned long previousConnectMillis = 0;
unsigned long previousPublishMillis = 0;

void loop() {
  unsigned long now = millis();
  if (!mqttClient.connected()) {
    if (now - previousConnectMillis >= 2000) {
      previousConnectMillis = now;
      if (mqttClientConnect()) previousConnectMillis = 0;
      else delay(1000);
    }
  } else { 
    mqttClient.loop();
    delay(20);
  }
}